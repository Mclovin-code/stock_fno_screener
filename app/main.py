import streamlit as stimport pandas as pdimport threadingimport jsonfrom fuzzywuzzy import processfrom app.websocket_client import run_websocketfrom config.settings import API_KEY, ACCESS_TOKEN# Define the columns of the tablecolumns = ["Stock", "View", "Expiry", "Spread Price", "Margin Requirement", "ATM IV", "IVP", "Risk Reward", "Max Profit", "Max Loss", "Breakeven", "Return %"]# Predefined list of stock names (for example purposes)stock_list = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "FB", "BRK.B", "JNJ", "V", "PG"]# Function to load data from CSVdef load_data():    try:        return pd.read_csv("screener_table.csv")    except FileNotFoundError:        return pd.DataFrame(columns=columns)# Function to save data to CSVdef save_data(df):    df.to_csv("screener_table.csv", index=False)# Initialize Streamlit session stateif 'df' not in st.session_state:    st.session_state.df = load_data()# Function to update a row in the DataFramedef update_row(stock, data):    df = st.session_state.df    idx = df[df['Stock'] == stock].index    if not idx.empty:        idx = idx[0]        df.at[idx, 'Spread Price'] = data.get('spread_price', 0.0)        df.at[idx, 'Margin Requirement'] = data.get('margin_requirement', 0.0)        df.at[idx, 'ATM IV'] = data.get('atm_iv', 0.0)        df.at[idx, 'IVP'] = data.get('ivp', 0.0)        df.at[idx, 'Risk Reward'] = data.get('risk_reward', 0.0)        df.at[idx, 'Max Profit'] = data.get('max_profit', 0.0)        df.at[idx, 'Max Loss'] = data.get('max_loss', 0.0)        df.at[idx, 'Breakeven'] = data.get('breakeven', 0.0)        df.at[idx, 'Return %'] = data.get('return_pct', 0.0)        st.session_state.df = df        save_data(df)        # Only update specific part of the UI        with st.empty():            st.dataframe(df[["Stock", "Spread Price", "Margin Requirement", "ATM IV", "IVP", "Risk Reward", "Max Profit", "Max Loss", "Breakeven", "Return %"]])# Start websocket connection in a separate threadthreading.Thread(target=run_websocket, args=(update_row, API_KEY, ACCESS_TOKEN), daemon=True).start()# Streamlit UIst.title("Stock Option Screener")st.sidebar.header("Input Parameters")# Autocomplete stock inputinput_stock = st.sidebar.text_input("Stock Name")if input_stock:    suggestions = process.extract(input_stock, stock_list, limit=5)    suggested_stock = st.sidebar.selectbox("Suggested Stocks", [s[0] for s in suggestions])else:    suggested_stock = ""view = st.sidebar.selectbox("View", ["Bullish", "Bearish", "Neutral"])expiry = st.sidebar.date_input("Expiry Date")# Button to add the inputs to the DataFrameif st.sidebar.button("Add to Table"):    if suggested_stock and view and expiry:        new_data = {            "Stock": suggested_stock,            "View": view,            "Expiry": expiry,            "Spread Price": 0.0,            "Margin Requirement": 0.0,            "ATM IV": 0.0,            "IVP": 0.0,            "Risk Reward": 0.0,            "Max Profit": 0.0,            "Max Loss": 0.0,            "Breakeven": 0.0,            "Return %": 0.0        }        st.session_state.df = st.session_state.df.append(new_data, ignore_index=True)        save_data(st.session_state.df)        st.experimental_rerun()# Display the initial tabletable_placeholder = st.empty()table_placeholder.dataframe(st.session_state.df[["Stock", "Spread Price", "Margin Requirement", "ATM IV", "IVP", "Risk Reward", "Max Profit", "Max Loss", "Breakeven", "Return %"]])# Save the table as a CSV (in case you want a separate save button)if st.button("Save Table as CSV"):    save_data(st.session_state.df)    st.success("Table saved as screener_table.csv")